API are mechanisms that allows two different components of software that is backend and frontend to interact with each other using a defined set of rules, protocols and data formats.

Analogy => Kitchen is Backend, User is Frontend, Waiter is API, food menu is set of rules or protocols.

Before the existance of APIs, there was Monolithic Architecture where both frontend and backend were in same dierctory. Frontend used to directly communicate with backend.

But there was a problem with monolithic architecture, as the data inside database can not be shared to any other; it is limited to frontend only.

But API gives access to use backend via some fetch functions of the app with certain protocols thus allowing everyone to use database and fetch the data.

API always return data in json formats which is acceptable by all the programming languages.

With a single backend and a single database which is accesible by an API, one can make Web frontend, ios frontend, android frontend using single backend.

In field of AI/ML, we will replace database by ML mode which is connected through backend. From frontend we could
connect to backend via API and then finally can use AL/Ml models for apps.

What is FastAPI?
FastAPI is a modern, high-performance, web framework for building APIs with python.
It is build-up on two very important python libraries - 1) Starlette
2) Pydantic

Starlette manages how your API receives requests and send back responses.

Pydantic is used to check if the data coming into your API is correct and in the correct format

Philosphy of FastAPI-
1) Fast to run
2) Fast to code

Why FastAPI fast to run??----------------------------------------------------------------------------------------------

There are 2 components of any API-
1)API code = To implement overall business logic
2)Web Server = To process upcoming HTTPs request coming from the client

Web Server--------->Server Gateway Interface (SGI)-------->API Code

Https request goes to SGI, SGI convert Https request to python understandable format and passes to API code generate response and then send it back to the web server and then to client.

Flask is also a framework to write APIs.

Web Server--------->Server Gateway Interface (SGI)-------->API Code
Gunicorn----------->WSGI->Werkzeug------------------------>Sync Endpoint (Flask)
uvicorn------------>ASGI->Pydantic------------------------>Async Endpoint (FastAPI)

WSGI = Web Server Gateway Interface = Works synchronously
ASGI = Asynchronous Server Gateway Interface = Works asynchronously

Werkzeug and Pydantic are the libraries used to implement WSGI and ASGI respectively.

Uvicorn is high performance server than Gunicorn and perform tasks asynchronously.



Why FastAPI fast to code?------------------------------------------------------------------------------------------------

1) Automatic data validation
2) Auto-generated interractive documentation
3) Seamless integration with Modern Ecosystem (ML/DL libraries, OAuth, etc.)

Client-Server Architecture-----------------------------------------------------------------------------------------------

Client = A client is a computer, device or programme that requests service or resources from other computer. Eg. Browser
Server = A server is acomputer or software (set of instructions that tell computer what to do) that provides service or resources to client over a network. Eg. Apahche, Nginx


# User Side
Browser (Chrome/Firefox/Edge)
---------------------------------
| Sends request to a website     |
| Receives HTML, CSS, JS, JSON  |
---------------------------------

          |
          v

# Web Server (Software running on a Server Computer)
Web Server (Apache, Nginx, LiteSpeed)
---------------------------------
| Receives HTTP requests         |
| Serves static content directly |
| For dynamic requests, forwards |
|   to Application Server        |
---------------------------------

          |
          v

# Application Server (Runs Backend Code)
Application Server (Uvicorn, Gunicorn, Node.js, Tomcat)
---------------------------------
| Executes backend logic         |
| Processes requests             |
| Connects to database           |
| Returns response (JSON/HTML)  |
---------------------------------

          |
          v

# Backend / API
Backend Code (Python, Node.js, Java, PHP, etc.)
---------------------------------
| Handles business logic          |
| Defines API endpoints (/login, /products, /users) |
| Reads/writes data to Database   |
---------------------------------

          |
          v

# Database Server (Another type of server)
Database Server (MySQL, PostgreSQL, MongoDB)
---------------------------------
| Stores and manages data         |
| Responds to queries from Backend|
---------------------------------

          ^
          |
# Response goes back the same way:
Backend → Application Server → Web Server → Browser

# Optional Hosting Platforms
Cloud Platforms (AWS, Render, Vercel)
---------------------------------
| Provide servers (physical/virtual) to host your web server & backend |
| Handle uptime, security, scalability                                   |
---------------------------------


HTTPS Methods--------------------------------------------------------------------------------------------------

Software can be of two types - 
1) Static (Calneder)
2) Dynamic (Word, Excel etc.)

Type of interactions you can do with a software -
C = Create
R = Read
U = Update
D = Delete

Websites are special softwares that are installed on some external computers (Servers) but can be used by anyone (clients) via HTTPS.

Websites are also of two type = Static and Dynamic

GET = To fetch something
POST = To add something
PUT = To update something
DELETE = To delete something

Path Params-------------------------------------------------------------------------------------------------------------

Path Parameters are dynamic segment of a url path used to identify a specific resource.

The Path() function :-
In FastAPI, it is used to provide metadata, validation rules, and documentation hints for path parameters in your API endpoints. 
Title
Discription
Example
Max_length
Min_length
regex
ge, gt, le, lt etc.


HTTPs status code-------------------------------------------------------------------------------------------------------

These are 3-digit code returned by the server (FastAPI) to the client (browser) on requesting, that let the client understand that what has happended to his request.

2XX = Success
3XX = Redirect (Further action needed)
4xx = Client Error
5xx = Server Error

HTTPException---------------------------------------------------------------------------------------------------------
It is a build-in exception in FastAPI that will return the custom HTTP error response when something goes wrong on your API.
You can send status code.
You can send custom message.

Query Parameters------------------------------------------------------------------------------------------------------

Query paramters are optional key-value pairs added at the endpoint of HTTP URL using which you can preform extra operations without disturbing the original end-point.

Rules -
Query Param starts with '?'
Multiple queries are separted by '&'
They are in key-value pair

Query() function of FastAPI is used declare, validate and document query parameter in your API endpoints.
It allows u to 
1) Set default value
2) Validate rules
3) Add metadata

default, title, description, example, min_length, ge, le, regex etc.


Why we need Pydantic?-------------------------------------------------------------------------------------------------
1) For data validation
2) For type validation

Without Pydantic we need to handle the above 2 problem via manual coding which is not scalable at all.

How does Pydantic works?-----------------------------------------------------------------------------------------------
1) Define a pydantic model that represents ideal schema of the data
2) Instantaniate the model with raw input data
3) Pass the validated model object to the functions or use it throughout the database


Request body---------------------------------------------------------------------------------------------------

A request body is a portion of HTTPs request that contains data sent by the client to the the server. It is typially used in HTTPs methods such as POST or PUT to transmit structured data.

Three step process:-
1) Client is sending data to the server
2) Validation of data
3) If validated then add to json

